Week 1 Vocabulary

Variables
declare a Variable


Basic Data types in py
    string
    int
    float
    bool

Basic Sequences
    string
    list
    tuples
    set
    range

Collections
    dictionaries
    lists
    tuples
    sets

functions
global scope and local scope
    print
    def
    return
    arguments - pieces of information provided to function, can also be called paramiters
    "call the function": triggering a function by writting its name
indentations - space after the : indentations modify the scope
    methods: are functions that are part of a class scope

Week 2 Vocabulary
OOP = object orientd programming
Object = an instance of a class
class = major way to represent something in the code (a blueprint for building an object)
EX: class Car > white citron c3
methodes are functions in the scope of a class

inheritance: a class can inherit atributes and methodes from another class.they are called "parent" and "Child"
multiple inheritance: a class can inherit from more that one other class(two or more parents)
super(): initiates attributes from the parent class
polymorphism: when we use a method with the same name in multiple classes with relationship
try adnd accept block: helpfil for data calidation and avoid internaal errors and avoid to crash the code

decorators: 
@staticmethod: a method that does not need self or cls
@classmethod: a method that can be called on the class (before creating the obj)
@property: a method that nbehavior like an atribute (you can asess the output of this method with dot notion "obj1)

**W2 - OOP - Object-Oriented Programming**

**Day 1**

* **Class**: A blueprint for creating objects
* **Objects**: An instance of a class
  `cat_1 = Cat('miau', 5)`
* **Methods**: Functions related to a certain class

**Day 2**

* **Inheritance**: A class can inherit attributes and methods from another class.
  These classes are called "parent" and "child."
* **Multiple Inheritance**: A class can inherit from more than one class (two or more parents).
* **`super()`**: Initializes attributes from the parent class.
* **Polymorphism**: Using a method with the same name in multiple classes that are related.
* **`try` and `except` block**: Useful for data validation and preventing internal errors that could crash the code.

**Day 3**

* **Decorators**:

  * `@staticmethod`: A method that doesn’t require `self` or `cls`.
  * `@classmethod`: A method that can be called on the class itself (before creating an object).
  * `@property`: A method that behaves like an attribute (you can access the output using dot notation, e.g., `obj1.age`).

* **Dunder Methods**: Short for “double underscore,” also called "magic methods."

  * `__init__(self)`
  * `__str__(self)`
  * `__repr__(self)`
  * `__lt__(self)`
  * `__eq__(self)`

These methods are triggered automatically, often through math or comparison operations.

